// JavaScript validation logic
    const usernameInput = containerRef.current.querySelector('#username') as HTMLInputElement;
    const emailInput = containerRef.current.querySelector('#email') as HTMLInputElement;
    const passwordInput = containerRef.current.querySelector('#password') as HTMLInputElement;
    const submitBtn = containerRef.current.querySelector('#submitBtn') as HTMLButtonElement;
    const loginForm = containerRef.current.querySelector('#loginForm') as HTMLFormElement;

    // Validation state
    let validationState = {
      usernameCapital: false,
      emailAt: false,
      passwordLength: false,
      passwordNumber: false,
      passwordSpecial: false
    };

    // Update validation UI
    function updateValidationUI(ruleId: string, isValid: boolean) {
      const rule = containerRef.current?.querySelector('#' + ruleId);
      if (!rule) return;

      const icon = rule.querySelector('.validation-icon');
      const text = rule.querySelector('.validation-text');

      if (isValid) {
        icon?.classList.remove('invalid');
        icon?.classList.add('valid');
        text?.classList.remove('invalid');
        text?.classList.add('valid');
        if (icon) icon.textContent = 'âœ“';
      } else {
        icon?.classList.remove('valid');
        icon?.classList.add('invalid');
        text?.classList.remove('valid');
        text?.classList.add('invalid');
        if (icon) icon.textContent = 'âœ—';
      }
    }

    // Update submit button
    function updateSubmitButton() {
      const allValid = Object.values(validationState).every(Boolean);
      
      if (submitBtn) {
        submitBtn.disabled = !allValid;
        submitBtn.textContent = allValid ? 'Login Successfully âœ“' : 'Complete Validation to Login';
      }
    }

    // Username validation
    function validateUsername(username: string) {
      const hasCapitalLetter = /[A-Z]/.test(username);
      validationState.usernameCapital = hasCapitalLetter;
      updateValidationUI('usernameCapital', hasCapitalLetter);
      updateSubmitButton();
    }

    // Email validation
    function validateEmail(email: string) {
      const hasAtSymbol = email.includes('@');
      validationState.emailAt = hasAtSymbol;
      updateValidationUI('emailAt', hasAtSymbol);
      updateSubmitButton();
    }

    // Password validation
    function validatePassword(password: string) {
      const hasMinLength = password.length >= 8;
      const hasNumber = /\d/.test(password);
      const hasSpecialChar = /[!@#$%^&*(),.?":{}|<>]/.test(password);

      validationState.passwordLength = hasMinLength;
      validationState.passwordNumber = hasNumber;
      validationState.passwordSpecial = hasSpecialChar;

      updateValidationUI('passwordLength', hasMinLength);
      updateValidationUI('passwordNumber', hasNumber);
      updateValidationUI('passwordSpecial', hasSpecialChar);
      updateSubmitButton();
    }

    // Event listeners
    usernameInput?.addEventListener('input', (e) => {
      const target = e.target as HTMLInputElement;
      validateUsername(target.value);
    });

    emailInput?.addEventListener('input', (e) => {
      const target = e.target as HTMLInputElement;
      validateEmail(target.value);
    });

    passwordInput?.addEventListener('input', (e) => {
      const target = e.target as HTMLInputElement;
      validatePassword(target.value);
    });

    loginForm?.addEventListener('submit', (e) => {
      e.preventDefault();
      const allValid = Object.values(validationState).every(Boolean);
      
      if (allValid) {
        const username = usernameInput?.value || '';
        const email = emailInput?.value || '';
        
        alert('ðŸŽ‰ Login successful! All validation rules are met.\n\nForm Data:\n' +
              'Username: ' + username + '\n' +
              'Email: ' + email + '\n' +
              'Password: [HIDDEN]\n\n' +
              'All authorization rules have been satisfied!');
      }
    });

  }, []);

  
